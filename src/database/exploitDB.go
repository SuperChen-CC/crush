package database

import (
	"crush/config"
	"crush/utils"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"time"
)

var exploitdb *sql.DB

func init() {
	conf := config.LoadConfig()
	connectionString := fmt.Sprintf("%s:%s@tcp(127.0.0.1:%d)/%s", conf.Database.DBUsername, conf.Database.DBPassword, conf.Database.DBPort, conf.Database.Name)
	var err error
	exploitdb, err = sql.Open("mysql", connectionString)
	if err != nil {
		utils.PrintColor("error", "Error connecting mysql database:", err, "\n")
		return
	}
	// 设置连接池的最大空闲连接数
	exploitdb.SetMaxIdleConns(20)
	// 设置连接池的最大打开连接数
	exploitdb.SetMaxOpenConns(50)

	if err := exploitdb.Ping(); err != nil {
		utils.PrintColor("error", "Error connecting mysql database:", err, "\n")
		return
	}
}

func CreateEDB() {
	// 创建 exploit_db 表
	_, err := exploitdb.Exec(`
		CREATE TABLE IF NOT EXISTS exploit_db (
		    id INT,
			description VARCHAR(255),
			type VARCHAR(50),
			platform VARCHAR(50),
			date_published DATE,
			verified INT,
			cve VARCHAR(2048),
			osvdb VARCHAR(2048),
			otherNum VARCHAR(2048)
		) DEFAULT CHARSET=utf8mb4;
	`)
	if err != nil {
		utils.PrintColor("error", "Error creating table exploit_db:", err, "\n")
		return
	}

}

func CheckCount() (int, error) {
	var count int
	err := exploitdb.QueryRow(`SELECT count(*) from exploit_db`).Scan(&count)
	if err != nil {
		utils.PrintColor("error", "Error query count(*) from exploit_db: %v", err)
		return 0, err
	}
	return count, nil
}
func InsertEDB(id int, description, exploitType, platform string, datePublished time.Time, verified int, cve, osvdb, otherNum string) error {
	// 插入数据
	_, err := exploitdb.Exec(`
		INSERT INTO exploit_db (id, description, type, platform, date_published, verified, cve, osvdb, otherNum)
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
	`, id, description, exploitType, platform, datePublished, verified, cve, osvdb, otherNum)

	if err != nil {
		utils.PrintColor("error", "Error inserting vul %v into table exploit_db: %v\n", id, err)
		return err
	}

	return nil
}
